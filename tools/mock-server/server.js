const jsonServer = require('json-server');
const server = jsonServer.create();
const router = jsonServer.router('db.json');
const middlewares = jsonServer.defaults();
const cors = require('cors');

// CORSË®≠ÂÆö
server.use(cors());

// „Éá„Éï„Ç©„É´„Éà„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ôºàlogger, static, cors, no-cacheÔºâ
server.use(middlewares);

// „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÅÆ„Éë„Éº„Çπ
server.use(jsonServer.bodyParser);

// „Ç´„Çπ„Çø„É†„É´„Éº„Éà: „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å
server.post('/api/v1/simulate', (req, res) => {
  const { user_data } = req.body;

  // „É¢„ÉÉ„ÇØ„É¨„Çπ„Éù„É≥„Çπ
  res.json({
    session_id: `session_${Date.now()}`,
    status: 'processing',
    message: 'Family simulation started',
    estimated_time: 30,
    data: {
      user_profile: user_data,
      family_members_count: 3,
      story_generated: false,
      image_generated: false
    }
  });
});

// „Ç´„Çπ„Çø„É†„É´„Éº„Éà: „Çπ„Éà„Éº„É™„ÉºÁîüÊàê
server.post('/api/v1/stories/generate', (req, res) => {
  const { session_id, scenario } = req.body;

  res.json({
    story_id: `story_${Date.now()}`,
    session_id,
    title: 'Êú™Êù•„ÅÆÂÆ∂Êóè„ÅÆ‰∏ÄÊó•',
    content: '„ÅÇ„Å™„Åü„ÅÆÊú™Êù•„ÅÆÂÆ∂Êóè„ÅØ„ÄÅÁ¨ëÈ°î„ÅÇ„Åµ„Çå„ÇãÁ¥†Êïµ„Å™Êó•„ÄÖ„ÇíÈÅé„Åî„Åó„Å¶„ÅÑ„Åæ„Åô...',
    scene: scenario || 'daily_life',
    status: 'completed',
    created_at: new Date().toISOString()
  });
});

// „Ç´„Çπ„Çø„É†„É´„Éº„Éà: ÊâãÁ¥ôÁîüÊàê
server.post('/api/v1/letters/generate', (req, res) => {
  const { session_id, from_member } = req.body;

  res.json({
    letter_id: `letter_${Date.now()}`,
    session_id,
    from: from_member || 'child',
    subject: 'Â§ßÂ•Ω„Åç„Å™„Éë„Éë„Éª„Éû„Éû„Å∏',
    content: '„ÅÑ„Å§„ÇÇ„ÅÇ„Çä„Åå„Å®„ÅÜÔºÅÂ§ßÂ•Ω„Åç„Å†„ÇàÔºÅ',
    illustration_url: '/mock/images/child-drawing.png',
    status: 'completed',
    created_at: new Date().toISOString()
  });
});

// „Ç´„Çπ„Çø„É†„É´„Éº„Éà: ÁîªÂÉèÁîüÊàê
server.post('/api/v1/images/generate', (req, res) => {
  const { session_id, prompt, style } = req.body;

  res.json({
    image_id: `image_${Date.now()}`,
    session_id,
    url: '/mock/images/generated-family.png',
    prompt,
    style: style || 'realistic',
    status: 'completed',
    created_at: new Date().toISOString()
  });
});

// „Ç´„Çπ„Çø„É†„É´„Éº„Éà: „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
server.get('/api/v1/health', (req, res) => {
  res.json({
    status: 'healthy',
    version: '1.0.0',
    mock: true,
    timestamp: new Date().toISOString(),
    services: {
      database: 'ok',
      redis: 'ok',
      ai_service: 'ok'
    }
  });
});

// ÈÅÖÂª∂„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ôºà„É™„Ç¢„É´„Å™APIÂãï‰Ωú„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºâ
server.use((req, res, next) => {
  setTimeout(next, 300); // 300ms„ÅÆÈÅÖÂª∂
});

// JSON Server„ÅÆ„É´„Éº„Çø„Éº„Çí‰ΩøÁî®
server.use('/api/v1', router);

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ Mock API Server is running on http://localhost:${PORT}`);
  console.log(`üìù Resources available at:`);
  console.log(`   - http://localhost:${PORT}/api/v1/users`);
  console.log(`   - http://localhost:${PORT}/api/v1/sessions`);
  console.log(`   - http://localhost:${PORT}/api/v1/stories`);
  console.log(`   - http://localhost:${PORT}/api/v1/letters`);
  console.log(`   - http://localhost:${PORT}/api/v1/images`);
  console.log(`   - http://localhost:${PORT}/api/v1/health`);
  console.log(`\nüí° Custom endpoints:`);
  console.log(`   - POST http://localhost:${PORT}/api/v1/simulate`);
  console.log(`   - POST http://localhost:${PORT}/api/v1/stories/generate`);
  console.log(`   - POST http://localhost:${PORT}/api/v1/letters/generate`);
  console.log(`   - POST http://localhost:${PORT}/api/v1/images/generate`);
});
