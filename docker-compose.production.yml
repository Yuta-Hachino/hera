# ==========================================
# 本番環境用（AWS S3 + Redis）
# ==========================================
version: '3.8'

services:
  # ============================================
  # バックエンドAPI
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hera-backend
    ports:
      - "8080:8080"
    environment:
      # 基本設定
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - FLASK_DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PORT=8080
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}

      # ストレージ設定（ハイブリッド）
      - STORAGE_MODE=cloud
      - CLOUD_STORAGE_TYPE=s3

      # Redis（メタデータ用）
      - REDIS_URL=redis://redis:6379/0
      - SESSION_TTL=86400  # 24時間

      # AWS S3（画像ファイル用）
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-northeast-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}

    volumes:
      # ログのみローカル保存
      - backend-logs:/app/logs
    networks:
      - hera-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ============================================
  # Redis（セッションメタデータ）
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: hera-redis
    volumes:
      - redis-data:/data
    networks:
      - hera-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # ============================================
  # フロントエンド
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    container_name: hera-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    networks:
      - hera-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  backend-logs:
    driver: local

networks:
  hera-network:
    driver: bridge
